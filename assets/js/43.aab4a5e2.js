(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{627:function(t,s,a){"use strict";a.r(s);var n=a(5),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("解决接口跨域问题的方案主要有两种：")]),t._v(" "),a("ul",[a("li",[t._v("CORS（主流的解决方案，推荐使用）")]),t._v(" "),a("li",[t._v("JSONP（有缺陷的解决方案：只支持 GET 请求）")])]),t._v(" "),a("h2",{attrs:{id:"使用-cors-中间件解决跨域问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-cors-中间件解决跨域问题"}},[t._v("#")]),t._v(" 使用 cors 中间件解决跨域问题")]),t._v(" "),a("p",[t._v("cors 是 Express 的一个第三方中间件。通过安装和配置 cors 中间件，可以很方便地解决跨域问题。\n使用步骤分为如下 3 步：")]),t._v(" "),a("ol",[a("li",[t._v("运行 npm install cors 安装中间件")]),t._v(" "),a("li",[t._v("使用 const cors = require('cors') 导入中间件")]),t._v(" "),a("li",[t._v("在路由之前调用 app.use(cors()) 配置中间件")])]),t._v(" "),a("blockquote",[a("p",[t._v("CORS （Cross-Origin Resource Sharing，跨域资源共享）由一系列 HTTP 响应头组成，这些 HTTP 响应头决定浏览器是否阻止前端 JS 代码跨域获取资源。\n浏览器的同源安全策略默认会阻止网页“跨域”获取资源。但如果接口服务器配置了 CORS 相关的 HTTP 响应头，就可以解除浏览器端的跨域访问限制。")])]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("CORS")]),t._v(" "),a("strong",[t._v("的注意事项")])]),t._v(" "),a("ol",[a("li",[t._v("CORS 主要在服务器端进行配置。客户端浏览器"),a("strong",[t._v("无须做任何额外的配置")]),t._v("，即可请求开启了 CORS 的接口。")]),t._v(" "),a("li",[t._v("CORS 在浏览器中有兼容性。只有支持 XMLHttpRequest Level2 的浏览器，才能正常访问开启了 CORS 的服务端接口（例如：IE10+、Chrome4+、FireFox3.5+）。")])])]),t._v(" "),a("h3",{attrs:{id:"cors配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cors配置"}},[t._v("#")]),t._v(" cors配置")]),t._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[t._v("点击查看更多")]),t._v(" "),a("h4",{attrs:{id:"cors-响应头部-access-control-allow-origin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cors-响应头部-access-control-allow-origin"}},[t._v("#")]),t._v(" CORS 响应头部 - Access-Control-Allow-Origin")]),t._v(" "),a("p",[t._v("例如，下面的字段值将"),a("strong",[t._v("只允许")]),t._v("来自 http://itcast.cn 的请求："),a("br"),t._v(" "),a("code",[t._v("res.setHeader('Access-Control-Allow-Origin', 'http://itcast.cn')")])]),t._v(" "),a("p",[t._v("如果指定了 Access-Control-Allow-Origin 字段的值为通配符 *，表示允许来自任何域的请求，示例代码如下:"),a("br"),t._v(" "),a("code",[t._v("res.setHeader('Access-Control-Allow-Origin', *)")])]),t._v(" "),a("h4",{attrs:{id:"cors-响应头部-access-control-allow-headers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cors-响应头部-access-control-allow-headers"}},[t._v("#")]),t._v(" CORS 响应头部 - Access-Control-Allow-Headers")]),t._v(" "),a("p",[t._v("   默认情况下，CORS 仅支持客户端向服务器发送如下的 9 个请求头：\nAccept、Accept-Language、Content-Language、DPR、Downlink、Save-Data、Viewport-Width、Width 、Content-Type （值仅限于 text/plain、multipart/form-data、application/x-www-form-urlencoded 三者之一）"),a("br"),t._v("\n   如果客户端向服务器发送了额外的请求头信息，则需要在服务器端，通过 Access-Control-Allow-Headers 对额外的请求头进行声明，否则这次请求会失败！")]),t._v(" "),a("h4",{attrs:{id:"cors-响应头部-access-control-allow-methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cors-响应头部-access-control-allow-methods"}},[t._v("#")]),t._v(" CORS 响应头部 - Access-Control-Allow-Methods")]),t._v(" "),a("p",[t._v("  默认情况下，CORS 仅支持客户端发起 GET、POST、HEAD 请求。"),a("br"),t._v("\n如果客户端希望通过 PUT、DELETE 等方式请求服务器的资源，则需要在服务器端，通过 Access-Control-Alow-Methods来指明实际请求所允许使用的 HTTP 方法。")]),t._v(" "),a("div",{staticClass:"custom-block theorem"},[a("p",{staticClass:"title"}),a("p",[t._v("客户端在请求 CORS 接口时，根据请求方式和请求头的不同，可以将 CORS 的请求分为两大类，分别是：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("简单请求\n同时满足以下两大条件的请求，就属于简单请求：")]),t._v(" "),a("ul",[a("li",[t._v("请求方式：GET、POST、HEAD 三者之一")]),t._v(" "),a("li",[t._v("HTTP 头部信息不超过以下几种字段：无自定义头部字段、Accept、Accept-Language、Content-Language、DPR、Downlink、Save-Data、Viewport-Width、Width 、Content-Type（只有三个值application/x-www-form-urlencoded、multipart/form-data、text/plain）")])])]),t._v(" "),a("li",[a("p",[t._v("预检请求\n只要符合以下任何一个条件的请求，都需要进行预检请求：")]),t._v(" "),a("ul",[a("li",[t._v("请求方式为 GET、POST、HEAD 之外的请求 Method 类型")]),t._v(" "),a("li",[t._v("请求头中包含自定义头部字段")]),t._v(" "),a("li",[t._v("向服务器发送了 application/json 格式的数据\n在浏览器与服务器正式通信之前，浏览器会先发送 OPTION 请求进行预检，以获知服务器是否允许该实际请求，所以这一次的 OPTION 请求称为“预检请求”。服务器成功响应预检请求后，才会发送真正的请求，并且携带真实数据。")])])])]),t._v(" "),a("blockquote",[a("p",[t._v("简单请求的特点：客户端与服务器之间只会发生一次请求。\n预检请求的特点：客户端与服务器之间会发生两次请求，OPTION 预检请求成功之后，才会发起真正的请求。")])])])]),t._v(" "),a("h2",{attrs:{id:"使用jsonp解决跨域问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用jsonp解决跨域问题"}},[t._v("#")]),t._v(" 使用JSONP解决跨域问题")]),t._v(" "),a("p",[t._v("浏览器端通过 "),a("code",[t._v("<script>")]),t._v(" 标签的 src 属性，请求服务器上的数据，同时，服务器返回一个函数的调用。这种请求数据的方式叫做 JSONP。特点：")]),t._v(" "),a("ul",[a("li",[t._v("JSONP 不属于真正的 Ajax 请求，因为它没有使用 XMLHttpRequest 这个对象。")]),t._v(" "),a("li",[t._v("JSONP 仅支持 GET 请求，不支持 POST、PUT、DELETE 等请求。")])]),t._v(" "),a("blockquote",[a("p",[t._v("注意：如果项目中已经配置了 CORS 跨域资源共享，为了防止冲突，必须在配置 CORS 中间件之前声明 JSONP 的接口。否则 JSONP 接口会被处理成开启了 CORS 的接口。")])]),t._v(" "),a("div",{staticClass:"custom-block theorem"},[a("p",{staticClass:"title"}),a("p",[t._v("实现 JSONP 接口的步骤")]),t._v(" "),a("ol",[a("li",[t._v("获取客户端发送过来的回调函数的名字")]),t._v(" "),a("li",[t._v("得到要通过 JSONP 形式发送给客户端的数据")]),t._v(" "),a("li",[t._v("根据前两步得到的数据，拼接出一个函数调用的字符串")]),t._v(" "),a("li",[t._v("把上一步拼接得到的字符串，响应给客户端的 "),a("code",[t._v("<script>")]),t._v(" 标签进行解析执行")])])]),a("p",[t._v("客户端代码：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#btnJSONP'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'click'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  $"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ajax")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("method")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'GET'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("url")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://127.0.0.1/api/jsonp'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("dataType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'jsonp'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//表示要发起JSONP请求")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("success")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("res")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("服务端代码：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("app"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/api/jsonp'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("req"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("res")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1.获取客户端发送过来的回调函数的名字")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" funcName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" req"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("query"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("callback\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//2. 得到要通过 JSONP 形式发送给客户端的数据")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" data "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'zs'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("age")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//3. 根据前两步得到的数据，拼接出一个函数调用的字符串")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" scriptStr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("funcName"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringify")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//4. 把上一步拼接得到的字符串，响应给客户端的 `<script>` 标签进行解析执行")]),t._v("\n  res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("scriptStr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);